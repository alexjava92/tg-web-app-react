import React, {useState} from 'react';
import './TransactionsTable.css';
import '../../../App.css';
import {convertSatoshisToBitcoin} from "../../../calculator/convertSatoshisToBitcoin.mjs";
import {config} from "../../../api/config";

const TransactionCard = ({transaction}) => {
    const [showDetails, setShowDetails] = useState(false);

    const toggleDetails = () => setShowDetails(!showDetails);

    const renderTransactionDetails = () => {
        let icon, action, amount;
        switch (transaction.transactionType) {
            case 'Incoming':
                icon = 'üü¢';
                action = '–ü–æ–ª—É—á–µ–Ω–æ';
                amount = convertSatoshisToBitcoin(transaction.amountReceived);
                break;
            case 'Outgoing':
                icon = 'üî¥';
                action = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
                amount = convertSatoshisToBitcoin(transaction.amountSent);
                break;
            case 'Internal':
                icon = 'üîÅ';
                action = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è';
                amount = `${convertSatoshisToBitcoin(transaction.amountSent)} / ${convertSatoshisToBitcoin(transaction.amountReceived)}`;
                break;
            default:
                icon = '‚ùì';
                action = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                amount = '---';
                break;
        }
        return (
            <>
                <div>{icon} {action}</div>
                <div>–î–∞—Ç–∞ –≤—Ä–µ–º—è: {transaction.blockTime}</div>
                <div>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}</div>
            </>
        );
    };

    const transactionUrl = `${config.mempoolUrl}/tx/`;
    return (
        <div className="body_second" onClick={toggleDetails}>
            {renderTransactionDetails()}

            {showDetails && (
                <>
                    <div className={'transaction-id'}>TXID: {transaction.txid}</div>
                    <div className={'senders'}>–û—Ç: {transaction.senders.join(', ')}</div>
                    <div className={'recipients'}>–ö–æ–º—É: {transaction.recipients.join(', ')}</div>
                    <div className={transaction.confirmed ? 'confirmation-yes' : 'confirmation-no'}>
                        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction.confirmed ? 'Yes' : 'No'}
                    </div>
                    <span className={'span_show_transactions'}>
                        <a href={transactionUrl + transaction.txid} target="_blank"
                           rel="noopener noreferrer"
                           className={'transaction-link'}>
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    </a></span>
                </>

            )}
        </div>
    );
};

export const TransactionsList = ({transactions}) => {
    const [filter, setFilter] = useState('All');

    const filteredTransactions = transactions.filter(tx => {
        if (filter === 'All') return true;
        return tx.transactionType === filter;
    });

    const handleFilterClick = (type) => {
        setFilter(type);
    };
    return (
        <div>
            <div className={'body_second'}>
                <h3>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>
            </div>
            <div className={'flex-container'}>
                <span onClick={() => handleFilterClick('All')}>–í—Å–µ</span>
                <span onClick={() => handleFilterClick('Incoming')}>–ü–æ–ª—É—á–µ–Ω–æ</span>
                <span onClick={() => handleFilterClick('Outgoing')}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
                <span onClick={() => handleFilterClick('Internal')}>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π</span>
            </div>
            {filteredTransactions.map((transaction, index) => (
                <TransactionCard key={index} transaction={transaction}/>
            ))}
        </div>
    );
};
